import Konva from "konva";
let sceneWidth = 900;
let sceneHeight = 900;

var stage = new Konva.Stage({
    container: "container", // id of container <div>
    width: sceneWidth,
    height: sceneHeight,
});

var layer = new Konva.Layer();
stage.add(layer);
let imageloaded = false;
export default { 
    stage, 
    layer, 
    imageloaded,
 };
function fitStageIntoParentContainer() {
    var container = document.querySelector("#konvaCanvas");

    // now we need to fit stage into parent container
    var containerWidth = container.offsetWidth;
    var containerHeight = container.offsetHeight;
    // but we also make the full scene visible
    // so we need to scale all objects on canvas
    var scalew = containerWidth / sceneWidth;
    var scaleh = containerHeight / sceneHeight;
    stage.width(sceneWidth * scalew);
    stage.height(sceneHeight * scaleh);
    stage.scale({ x: scalew, y: scaleh });
    stage.x((containerWidth - sceneWidth * scalew) / 2);
    stage.y((containerHeight - sceneHeight * scaleh) / 2);

    // Force the layer to redraw (important for scaling)
    layer.batchDraw();
}

fitStageIntoParentContainer();
window.addEventListener("resize", fitStageIntoParentContainer);

function getCurrentImageUrl(imageUrl,callback) {
    var imageObj = new Image();
    imageObj.onload = function () {
        var templateImage = new Konva.Image({
            image: imageObj,
            width: sceneWidth,
            height: sceneHeight,
        });
        imageloaded = true;
        console.log("status1",imageloaded);
        // add the shape to the layer
        layer.add(templateImage);
        callback(true);
    };
    imageObj.src = imageUrl;
}

document.querySelectorAll(".image-button").forEach((button) => {
    button.addEventListener("click", function () {
        const imageUrl = this.getAttribute("data-file-url");
        getCurrentImageUrl(imageUrl);
    });
});

document
    .getElementById("templateButton")
    .addEventListener("click", function () {
        document.getElementById("templateImage").click();
    });

document
    .getElementById("templateImage")
    .addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
            // console.log("File selected:", file);
            uploadedImageDisplay(file);
        }
    });
function uploadedImageDisplay(file) {
    const uploadedImage = document.querySelector(".uploaded-image-button");

    // Clone the button element (including its child elements like <img>)
    const cloneUploadedImageElement = uploadedImage.cloneNode(true);

    // Show the cloned button
    cloneUploadedImageElement.style.display = "block";

    // Find the <img> element inside the cloned button
    const clonedImageElement = cloneUploadedImageElement.querySelector(
        ".uploaded-template-image"
    );

    // Set the <img> element's src to the uploaded file's URL
    const imageUrl = URL.createObjectURL(file);

    clonedImageElement.src = imageUrl;
    clonedImageElement.setAttribute("data-file-url", imageUrl); //to set the image url as an attribute called data-file-url
    clonedImageElement.style.display = "block";

    const newDiv = document.createElement("div");

    newDiv.classList.add("uploaded-image-container");
    newDiv.id = "div" + Date.now(); //using timestamp for unique div id
    document.getElementById("upload-template").appendChild(newDiv);
    document
        .getElementById("div" + Date.now())
        .appendChild(cloneUploadedImageElement);
    displayUploadedTemplate(); //method to display the uploaded image on click
}
// if (
//     document
//         .getElementById("test")
//         .classList.contains("uploaded-image-button")
// ) {

function displayUploadedTemplate() {
    //query selector on img element since data-file-url attribute is attached to img element

    document.querySelectorAll(".uploaded-template-image").forEach((button) => {
        button.addEventListener("click", function () {
            const imageUrl = this.getAttribute("data-file-url");

            getCurrentImageUrl(imageUrl);
        });
    });
}





import Konva from "konva";
import konvaObject from "./konvaScript.js";

document.addEventListener("DOMContentLoaded", function () {
    let textTransformers = {};  // Object to store text-transformer relationships

    // Event listener for adding new text
    document.querySelectorAll(".listData").forEach((item) => {
        item.addEventListener("click", function (event) {
            if (!konvaObject.layer.getChildren().length) {
                alert("Image not selected or loaded.");
                return;
            }

            // if(konvaObject.imageloaded==false){
            //     alert("image not selected");
            //     return;
            // }
            let data = event.target;
            let key = data.querySelector("#data-container").getAttribute("key");
            let value = data.querySelector("#data-container").getAttribute("value");

            var initialPosX = konvaObject.stage.width() / 2 - 50;
            var initialPosY = konvaObject.stage.height() / 2 - 25;

            // Create the text object
            var complexText = new Konva.Text({
                x: initialPosX,
                y: initialPosY,
                text: value,
                fontSize: 18,
                fontFamily: "Calibri",
                fill: "#555",
                width: 300,
                padding: 20,
                align: "center",
                draggable: true,
                name: key // Use key as the name for easy reference
            });
            

            // Create the close (X) symbol
            // var closeText = new Konva.Text({
            //     text: "X",
            //     fontSize: 20,
            //     fontFamily: "Calibri",
            //     fill: "red",
            //     draggable: false, // No need to drag the X symbol
            // });

            // Create transformer for the text
            var tr = new Konva.Transformer({
                anchorStroke: "black",
                anchorFill: "white",
                anchorSize: 8,
                borderStroke: "green",
                borderDash: [3, 3],
                nodes: [complexText],  // The transformer is attached to the complexText
            });

            // Store the transformer reference in the textTransformers object
            textTransformers[key] = tr;

            // Add transformer to the layer
            konvaObject.layer.add(tr);

            // Handle text hover effect
            complexText.on("mouseover", function () {
                document.body.style.cursor = "grab";
            });
            complexText.on("mouseout", function () {
                document.body.style.cursor = "default";
            });

            // Handle click on the X symbol to delete the text and its transformer
            // closeText.on("click", function () {
            //     complexText.destroy();
            //     closeText.destroy();
            //     tr.destroy();  // Remove the transformer when the text is destroyed
            //     konvaObject.layer.batchDraw(); // Redraw the layer to reflect changes
            // });

            // Add the text and closeText to the layer
            konvaObject.layer.add(complexText);
            //konvaObject.layer.add(closeText);

            // Function to update X position
            // function updateCloseSymbolPosition() {
            //     var trRect = tr.getClientRect();
            //     closeText.position({
            //         x: trRect.x + trRect.width - closeText.width() - 10,
            //         y: trRect.y + trRect.height - closeText.height() - 10,
            //     });
            //     konvaObject.layer.batchDraw(); // Redraw layer after position change
            // }

            // Initial position of the close symbol
            // updateCloseSymbolPosition();

            // Update the position of the X symbol on transform or drag
            // complexText.on("transform", updateCloseSymbolPosition);
            // complexText.on("dragmove", updateCloseSymbolPosition);

            konvaObject.layer.batchDraw();
        });
    });

    // Event listener for the X button in the sidebar
    document.querySelectorAll(".remove-btn").forEach((button) => {
        button.addEventListener("click", function () {
            // Get the key and value from the data attributes
            const key = button.getAttribute("data-key");
            const value = button.getAttribute("data-value");

            console.log("Removing text with key:", key, "and value:", value);

            // Find the corresponding Konva text object by key
            const konvaText = konvaObject.layer.findOne(`.${key}`);
            const transformer = textTransformers[key]; // Retrieve the associated transformer from the object

            if (konvaText) {
                // Remove the Konva object (text and transformer)
                konvaText.destroy();
                if (transformer) {
                    transformer.destroy(); // Destroy the associated transformer
                }
                konvaObject.layer.batchDraw(); // Redraw the layer to reflect changes
            }
        });
    });
});
